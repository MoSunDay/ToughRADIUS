#!/usr/bin/env python
import sys
import os
import shutil
import json
import time

appdir='/opt/toughradius'
rundir='/var/toughradius'

if not os.path.exists(rundir):
    os.mkdir(rundir)
    os.mkdir("%s/log"%rundir)
    
########################################################################    
#  print function
########################################################################
def _print(msg,t=0):
    print
    print "-"*80
    if t == 0:
        print "| (^_^) " + msg.ljust(70,' ') + " |"
    elif t == 1:
        print "| Y(^_^)Y " + msg.ljust(68,' ') + " |"
    elif t == 2:
        print "| ::>_<::orz " + msg.ljust(65,' ') + " |"        
    print "-"*80 
    print
    
########################################################################    
#  install system depend function
########################################################################
def install_depend():
    _print('start install system depend')
    r = os.system("yum update -y")
    r = os.system("yum install -y wget git gcc python-devel " \
                  "python-setuptools tcpdump crontabs MySQL-python")
    if r == 0: _print("install depend success",1)
    r = os.system("easy_install pip && easy_install supervisor && easy_install argparse")
    _print("install pip and supervisor success",1)
    return r == 0


########################################################################    
#  fetch release and setup package function
########################################################################
def install_radius():
    if os.path.exists(appdir):
        isdel = raw_input("%s already exists and is not empty, delete it? [y/n][n]:"%appdir) or 'n'
        if isdel == 'y':
            shutil.rmtree(appdir)
        else:
            return _print("do nothing")
        
    _print("start install ToughRADIUS")
    mirrors = {
        'github':"https://github.com/talkincode/ToughRADIUS.git",
        'oschina':"https://git.oschina.net/jamiesun/ToughRADIUS.git",
        'coding':"https://coding.net/jamiesun/ToughRADIUS.git",
        'csdn':"https://code.csdn.net/talkincode.org/toughradius.git"
    }
    fetch_ok = False
    mirror = raw_input("type ToughRADIUS release mirror [ %s ][github]:"%(",".join(mirrors.keys()))) or 'github'
    r = os.system("git clone %s %s"%(mirrors[mirror],appdir))
    if r > 0:
        _print("fetch release faild",2)
        return False
    
    r = os.system("pip install -r %s/requirements.txt"%appdir)
    if r > 0:
        _print("install depend python package faild",2)
        return False
    
    os.system("ln -s %s/toughrad /usr/bin/toughrad"%appdir)
    os.system("chmod +x /usr/bin/toughrad")   
    shutil.copy("%s/install/supervisord.conf"%appdir,"%s/supervisord.conf"%rundir) 
    return True
    
########################################################################    
#  install mysql and init  function
########################################################################  

def install_mysql():
    
    if (raw_input("install mysql, continue [y/n][n]") or 'n') == 'n' :
        return
    
    if os.path.exists("/usr/bin/mysqld_safe"):
        _print("mysql already installed,try shutdown...")
        os.system("mysqladmin --defaults-file=%s/mysql/my.cnf -uroot shutdown"%rundir)
        
    _print("install mysql")
    if os.path.exists("%s/mysql"%rundir):
        isdel = raw_input("%s/mysql already exists and is not empty, delete it? [y/n][n]:"%rundir) or 'n'
        if isdel == 'y':
            shutil.rmtree("%s/mysql"%rundir)
        else:
            return _print("do nothing")
            
    os.mkdir("%s/mysql"%rundir)
    shutil.copy("%s/install/my.cnf"%appdir,"%s/mysql/my.cnf"%rundir)
    mysql_ok = False
    if os.path.exists("/usr/bin/mysqld_safe"):
        mysql_ok = True
    else:
        osvers = ["centos6","centos7"]
        osver = raw_input("type your os version [ %s ][centos7]:"%(",".join(osvers))) or 'centos7'
        if osver == 'centos6':
            r = os.system("yum install -y mysql-server mysql-devel")
            if r > 0 :
                mysql_ok = False
                _print("install mysql failed",2)
            else:
                mysql_ok = True
        elif osver == 'centos7':
            os.system("rpm -ivh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm")
            r = os.system("yum install -y mysql-community-server mysql-community-devel")
            if r > 0 :
                mysql_ok = False
                _print("install mysql failed",2)
            else:
                mysql_ok = True
            
    if mysql_ok:
        _print("starting init mysql database;")
        os.system("chown -R mysql:mysql %s/mysql"%rundir)
        os.system("mysql_install_db --defaults-file=%s/mysql/my.cnf --user=mysql --datadir=%s/mysql"%(rundir,rundir))
        os.system("mysqld_safe --defaults-file=%s/mysql/my.cnf --user=mysql &"%rundir)
        for i in (5,4,3,2,1):
            print i
            time.sleep(1.0)
        os.system("crontab %s/install/backupdb.cron"%appdir)
        print
        admin = raw_input("set mysql manage username, not root [admin]:") or 'admin'
        print
        pwd = raw_input("set mysql manage passwd, [radius]:") or 'radius'
        r = os.system("echo \"GRANT ALL ON *.* TO %s@'%%' IDENTIFIED BY '%s' WITH GRANT OPTION;"\
                  "FLUSH PRIVILEGES\" | mysql --defaults-file=%s/mysql/my.cnf"%(admin,pwd,rundir)
        )
        _print("show database")
        r = os.system("echo \"show databases;\" | mysql --defaults-file=%s/mysql/my.cnf"%rundir)
        if r == 0:
            _print("mysql init done",1)
        else:
            _print("error",2)
    
    return mysql_ok


########################################################################    
#  setup config json file  function
########################################################################  

def setup_config():
    def gen_secret():
        import random
        rg = random.SystemRandom()
        r = list('1234567890abcdefghijklmnopqrstuvwxyz')
        return ''.join([rg.choice(r) for _ in range(128)])
        
    _print("please set config...")
    cjson = dict(
        database = {},
        backup = {},
        radiusd = {},
        admin = {},
        customer = {}
    )
    _print("set database option")
    cjson['database']['dbtype'] = raw_input("database type [mysql]:") or 'mysql' 
    cjson['database']['host'] = raw_input("database host [127.0.0.1]:") or '127.0.0.1' 
    cjson['database']['port'] = int(raw_input("database port [3306]:") or 3306)
    cjson['database']['db'] = raw_input("database dbname [toughradius]:") or 'toughradius' 
    cjson['database']['user'] = raw_input("database user [root]:") or 'root' 
    cjson['database']['passwd'] = raw_input("database passwd []:") or '' 
    cjson['database']['maxusage'] = int(raw_input("db pool maxusage [30]:") or 30)
    cjson['database']['charset'] = raw_input("database charset [utf8]:") or 'utf8' 
    
    _print("set backup option")
    cjson['backup']['ftphost'] = raw_input("backup ftphost [127.0.0.1]:") or '127.0.0.1' 
    cjson['backup']['ftpport'] = int(raw_input("backup ftpport [21]:") or 21)
    cjson['backup']['ftpuser'] = raw_input("backup ftpuser [ftpuser]:") or 'ftpuser' 
    cjson['backup']['ftppwd'] = raw_input("backup ftppwd [ftppwd]:") or 'ftppwd' 
    
    _print("set radiusd option")
    cjson['radiusd']['authport'] = int(raw_input("radiusd authport [1812]:") or 1812)
    cjson['radiusd']['acctport'] = int(raw_input("radiusd acctport [1813]:") or 1813)
    cjson['radiusd']['adminport'] = int(raw_input("radiusd adminport [1815]:") or 1815)
    cjson['radiusd']['dictfile'] = raw_input("radiusd dictfile [%s/radiusd/dict/dictionary]:"%appdir) \
        or '%s/radiusd/dict/dictionary'%appdir 
    cjson['radiusd']['debug'] = int(raw_input("radiusd debug [1]") or 1)
    cjson['radiusd']['cache_timeout'] = int(raw_input("radiusd cache_timeout (second) [600]:") or 600)
    
    cjson['admin']['httpport'] = int(raw_input("admin httpport [1816]:") or 1816)
    cjson['admin']['debug'] = int(raw_input("admin debug [1]:") or 1)
    cjson['customer']['httpport'] = int(raw_input("customer httpport [1817]:") or 1817)
    cjson['customer']['debug'] = int(raw_input("customer debug [1]:") or 1) 
    cjson['secret'] = raw_input("secret string [.]:") or gen_secret() 
    
    jsonstr = json.dumps(
        cjson, ensure_ascii=False,
        sort_keys=True,indent=4, 
        separators=(',', ': ')
    )
    
    with open("%s/radiusd.json"%rundir,'wb') as fs:
        fs.write(jsonstr)
    
    _print("config done",1)
    print jsonstr
       
########################################################################    
#  create radius db  function
########################################################################   
def init_db():
    if not os.path.exists(appdir):
        _print("radius not install,please install radius",2)
        return
    # mysql bug     
    sos = [ o for o in os.listdir("/usr/lib64/mysql") if 'libmysqlclient.so' in o]
    for so in sos:
        os.system("ln -s /usr/lib64/mysql/%s /usr/lib64/%s"%(so,so))
        os.system("ln -s /usr/lib64/mysql/%s /usr/lib/%s"%(so,so))
    if not sos:
        sos = [ o for o in os.listdir("/usr/lib/mysql") if 'libmysqlclient.so' in o]
        for so in sos:
            os.system("ln -s /usr/lib/mysql/%s /usr/lib/%s"%(so,so))
            
    sys.path.insert(0,"%s/console"%appdir)
    try:
        import models
        models.install2(config=json.loads(open("%s/radiusd.json"%rundir,'rb').read())['database'])
        _print("init db success",2)
    except:
        _print("init db faild",2)
        import traceback
        traceback.print_exc()
        
def start():
    _print("start server...")
    if os.path.exists("/usr/bin/toughrad"):
        os.system("/usr/bin/toughrad start")
        _print("server status")
        os.system("/usr/bin/toughrad status")
    else:
        _print("The setup is not complete",2)
        
def ihelp():
    print """
    Usage: python %s [OPTIONS]
    
    depend      install system depend package
    radius      install ToughRADIUS latest
    mysql       install mysql and init database (optional)
    config      init config file
    initdb      create ToughRADIUS database
    start       start server
    help        display help
    
    All other options are passed to the super-install program.
    """%sys.argv[0]
        
execs = {
    'depend' : install_depend,
    'radius' : install_radius,
    'mysql'  : install_mysql,
    'config' : setup_config,
    'initdb' : init_db,
    'start'  : start,
    'help'   : ihelp
}
 
if __name__ == '__main__':
    if len(sys.argv) >= 2:
        param = sys.argv[1]
        execs[param]()
    else:
        install_depend()  
        install_radius()
        install_mysql()
        setup_config()
        init_db()
        start()
        
